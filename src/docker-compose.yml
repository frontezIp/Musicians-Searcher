version: '3.8'

services:
    sqlserver: 
        container_name: SqlServer
        image: mcr.microsoft.com/mssql/server:2022-latest

    postgres:
        container_name: Postgres
        image: postgres:latest
     
    mongo:
        container_name: Mongo
        image: mongo

    mongo-express:
        image: mongo-express
        depends_on:
            - mongo

    identity:
        container_name: Identity
        build:
            context: "."
            dockerfile: "/Services/Identity/Identity.API/Dockerfile"
        depends_on:
            - kafka
            - postgres

    chat:
        container_name: Chat
        build:
            context: "."
            dockerfile: "/Services/Chat/Chat.API/Dockerfile"
        depends_on:
            - kafka
            - sqlserver

    musicians:
        container_name: Musicians
        build:
            context: "."
            dockerfile: "/Services/Musicians/Musicians.API/Dockerfile"
        depends_on:
            - kafka
            - mongo

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka
        depends_on:
            - zookeeper

    kafdrop:
        image: obsidiandynamics/kafdrop:latest
        container_name: kafdrop
        depends_on:
            - kafka
    
    logstash01:
        depends_on:
            - es01
            - kibana
        image: logstash:8.10.2

    filebeat:
        depends_on:
            - es01
        image: elastic/filebeat:8.10.2
        command: filebeat -e -strict.perms=false

    kibana:
        depends_on: 
            - es01
        image: kibana:8.10.2

    es01:
       depends_on:
            - elasticsetup
       image: elasticsearch:8.10.2
    
    elasticsetup:
        image: elasticsearch:8.10.2
        user: "0"
        command: >
         bash -c '
           if [ ! -f config/certs/ca.zip ]; then
             echo "Creating CA";
             bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
             unzip config/certs/ca.zip -d config/certs;
           fi;
           if [ ! -f config/certs/certs.zip ]; then
             echo "Creating certs";
             echo -ne \
             "instances:\n"\
             "  - name: es01\n"\
             "    dns:\n"\
             "      - es01\n"\
             "      - localhost\n"\
             "    ip:\n"\
             "      - 127.0.0.1\n"\
             "  - name: kibana\n"\
             "    dns:\n"\
             "      - kibana\n"\
             "      - localhost\n"\
             "    ip:\n"\
             "      - 127.0.0.1\n"\
             > config/certs/instances.yml;
             bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
             unzip config/certs/certs.zip -d config/certs;
           fi;
           echo "Setting file permissions"
           chown -R root:root config/certs;
           find . -type d -exec chmod 750 \{\} \;;
           find . -type f -exec chmod 640 \{\} \;;
           echo "Waiting for Elasticsearch availability";
           until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
           echo "Setting kibana_system password";
           until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:elastic123" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"kibana123\"}" | grep -q "^{}"; do sleep 10; done;
           echo "All done!";
           '  
